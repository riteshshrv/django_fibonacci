from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from django.test import LiveServerTestCase


class FunctionalTest(LiveServerTestCase):
    def setUp(self):
        # User Chrome as its the mostly used browser
        self.browser = webdriver.Chrome()
        self.browser.implicitly_wait(3)

    def tearDown(self):
        self.browser.quit()

    def check_for_row_in_table(self, row_text):
        table = self.browser.find_element_by_id('id_numbers_table')
        rows = table.find_elements_by_tag_name('tr')
        self.assertIn(row_text, [row.text for row in rows])

    def test_basic_functionality_of_boilerplate(self):
        self.browser.get(self.live_server_url)

        # Make sure the title has the app name
        self.assertIn('Fibonacci Numbers', self.browser.title)
        header_text = self.browser.find_element_by_tag_name('h1').text
        self.assertIn('Fibonacci Numbers', header_text)

        # There should be a input tag to enter 'N'
        inputbox = self.browser.find_element_by_id('id_new_n')
        self.assertEqual(inputbox.get_attribute('placeholder'), "Enter 'N'")

        # Hitting Enter should make a POST request to get the Nth
        # number and display it on page
        inputbox.send_keys(6)
        inputbox.send_keys(Keys.ENTER)

        # The user should be redirected to a unique url
        user1_list_url = self.browser.current_url
        self.assertRegex(user1_list_url, '/lists/.+')

        # The response now shows the result prefixed with the counter
        # and its the first request in test so, it should be prefixed with 1
        self.check_for_row_in_table('1: 8')

        # Now, if a new user visits the app, s/he shouldn't see the
        # numbers generated by the previous user
        self.browser.quit()
        self.browser = webdriver.Chrome()

        self.browser.get(self.live_server_url)
        page_text = self.browser.find_element_by_tag_name('body').text
        self.assertNotIn('1: 8', page_text)

        inputbox = self.browser.find_element_by_id('id_new_n')
        inputbox.send_keys(23)
        inputbox.send_keys(Keys.ENTER)
        self.check_for_row_in_table('1: 28657')

        user2_list_url = self.browser.current_url
        # url of both users must be different
        self.assertNotEqual(user1_list_url, user2_list_url)
